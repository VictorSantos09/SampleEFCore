@page "/genre"
<PageTitle>Gêneros</PageTitle>

<div class="mb-5">
    <Button BIcon="@Icons.Filled.Add" Message="Adicionar" BOnClick="() => OpenAddDialog()" />
</div>

<MudTable Items="@_genres" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_isLoading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>Remover</MudTh>
        <MudTh>Editar</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">
            @context.Name
        </MudTd>
        <MudTd DataLabel="Remover">
            <MudIconButton OnClick="() => Delete(context.Id)" Icon="@Icons.Filled.Delete" Color="Color.Error" />
        </MudTd>
        <MudTd DataLabel="Editar">
            <MudIconButton OnClick="() => OpenEditDialog(context)" Icon="@Icons.Filled.Edit" Color="Color.Dark" />
        </MudTd>
    </RowTemplate>
</MudTable>

@if (_genres.Any() == false)
{
    <MudAlert Severity="Severity.Info">Nenhum gênero cadastrado</MudAlert>
}

@code {
    [Inject]
    private IGenreService GenreService { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; }
    private IEnumerable<GenreModel> _genres = new List<GenreModel>();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _genres = await GenreService.GetAllAsync();
        _isLoading = false;
    }

    private async Task Delete(int id)
    {
        await GenreService.DeleteAsync(id);
        await OnInitializedAsync();
    }

    private void OpenAddDialog()
    {
        DialogOptions options = new DialogOptions() { CloseButton = true };
        DialogService.Show<AddGenreDialog>("Adicionar Gênero", options);
    }

    private void OpenEditDialog(GenreModel genre)
    {
        DialogOptions options = new DialogOptions() { CloseButton = true };

        DialogParameters parameters = new();
        parameters.Add("Genre", genre);

        DialogService.Show(typeof(EditGenreDialog), "Editar Gênero", parameters, options);
    }
}
