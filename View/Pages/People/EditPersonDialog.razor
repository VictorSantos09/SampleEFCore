@inject PersonService _service
@inject NavigationManager _navManager

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudTextField T="string" Label="Primeiro Nome" Required="true" @bind-Value="FirstName" Text="@FirstName" RequiredError="primeiro nome é necessário" />
                <MudTextField T="string" Label="Segundo Nome" Required="true" @bind-Value="LastName" Text="@LastName" RequiredError="segundo nome é necessário" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="d-block pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => Submit())">Salvar</MudButton>
        </MudPaper>

        <div class="mt-5" hidden="@isHideAlert">
            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">Os valores não foram alterados</MudAlert>
        </div>
    </DialogContent>
</MudDialog>


@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string LastName { get; set; }
    [Parameter]
    public string FirstName { get; set; }
    private bool _success;
    private bool isHideAlert { get; set; } = true;
    private MudForm _form;
    private string _initialFirstName;
    private string _initialLastName;

    protected override Task OnParametersSetAsync()
    {
        _initialLastName = LastName;
        _initialFirstName = FirstName;
        return Task.CompletedTask;
    }

    private async Task Submit()
    {
        if (FirstName == _initialFirstName && LastName == _initialLastName)
        {
            isHideAlert = false;
        }
        else
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                PersonModel newPerson = new(FirstName, LastName);
                await _service.UpdateAsync(Id, newPerson);
                _navManager.NavigateTo(_navManager.Uri, true);
            }
        }
    }
}
