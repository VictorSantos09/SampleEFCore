@inject MovieService _service
@inject NavigationManager _navManager

<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudTextField T="string" Text="@Title" Label="Título" Required="true" MaxLength="45" @bind-Value="Title" RequiredError="Título do filme é necessário" />
                <MudTextField Class="d-flex" T="string" Text="@Description" Label="Descrição" Required="true" MaxLength="200" @bind-Value="Description" RequiredError="Descrição do filme é necessário" />
            </MudForm>
        </MudPaper>
        <MudPaper Class="d-block pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => Submit())">Salvar</MudButton>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Description { get; set; }
    private bool _success;
    private MudForm _form;
    private string _initialTitle;
    private string _initialDescription;

    protected override Task OnParametersSetAsync()
    {
        _initialTitle = Title;
        _initialDescription = Description;
        return Task.CompletedTask;
    }

    private async Task Submit()
    {
        if (Title == _initialTitle && Description == _initialDescription)
            return;

        await _form.Validate();
        if (_form.IsValid)
        {
            var movie = await _service.GetByIdAsync(Id);
            movie.Title = Title;
            movie.Description = Description;
            await _service.UpdateAsync(Id, movie);
            _navManager.NavigateTo(_navManager.Uri, true);
        }
    }
}
