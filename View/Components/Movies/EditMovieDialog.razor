<MudDialog>
    <DialogContent>
        <MudPaper Class="pa-4">
            <MudForm @ref="_form" @bind-IsValid="@_success">
                <MudTextField T="string" Text="@Movie.Title" Label="Título" Required="true"
                              Counter="45" MaxLength="45" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MovieValidator.MaxDigitsTitle))"
                @bind-Value="Movie.Title" RequiredError="Título do filme é necessário" />

                <MudTextField Class="d-flex" T="string" Text="@Movie.Description" Label="Descrição" Required="true"
                              Counter="200" MaxLength="200" Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MovieValidator.MaxDigitsDescription))"
                @bind-Value="Movie.Description" RequiredError="Descrição do filme é necessário" />

                <MudSelect @bind-Value="Movie.Genre.Name" Label="Gênero" Text="@Movie.Genre.Name"
                           Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Selecione o gênero do filme">
                    @foreach (var g in Genres)
                    {
                        <MudSelectItem T="string" Value="g.Name">@g.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        </MudPaper>
        <MudPaper Class="d-block pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(() => Submit())">Salvar</MudButton>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public MovieModel Movie { get; set; }
    [Parameter]
    public IEnumerable<GenreModel> Genres { get; set; }
    [Inject]
    private GenreService GenreService { get; set; }
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    [Inject]
    private MovieService MovieService { get; set; }
    private bool _success;
    private MudForm _form;
    private int _genreId;
    private MovieModel _initialMovie;

    protected override async Task OnParametersSetAsync()
    {
        _initialMovie = new MovieModel(Movie.Title, Movie.Description, Movie.Genre, Movie.GenreId) { Id = Movie.Id};
    }

    private async Task Submit()
    {
        if (Movie.Equals(_initialMovie))
            return;

        if (ReferenceEquals(Movie, _initialMovie))
            return;

        await _form.Validate();
        if (_form.IsValid)
        {
            var genre = await GenreService.GetByNameAsync(Movie.Genre.Name);
            var originalMovie = await MovieService.GetByIdAsync(Movie.Id);
            Movie.Genre = genre;
            Movie.GenreId = genre.Id;
            originalMovie = Movie;
            await MovieService.UpdateAsync(originalMovie.Id, Movie);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
    }
}
